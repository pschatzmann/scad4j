package ch.pschatzmann.scad4j.mesh;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

/**
 * Loader for STL files which were generated by SCAD to convert the data into a
 * 3D array
 * 
 * @author pschatzmann
 *
 */
public class STL {
	private final static DecimalFormat decimalFormat = new DecimalFormat("0.0E0");

	/**
	 * Converts the stl file to an 3 dimensinal array
	 * 
	 * @param stlFile STL file
	 * @return float[][][]
	 * @throws IOException
	 * @throws ParseException
	 */
	public static float[][][] to3D(File stlFile) throws ParseException, IOException {
		Mesh mesh = toMesh(stlFile);
		return mesh.toArray();
	}

	/**
	 * Loads the Mesh from a STL text file
	 * 
	 * @param stlFile
	 * @return
	 * @throws FileNotFoundException
	 * @throws IOException
	 * @throws ParseException
	 */
	public static Mesh toMesh(File stlFile) throws FileNotFoundException, IOException, ParseException {
		Mesh mesh = new Mesh();
		BufferedReader in = new BufferedReader(new FileReader(stlFile));
		String line = null;
		List<Vertex> vectorVertex = new ArrayList();
		float[] normal = null;
		while ((line = in.readLine()) != null) {
			final String[] numbers = line.trim().split("\\s+");
			if (numbers[0].equals("endloop")) {
				Edge v1 = mesh.uniqueEdge(vectorVertex.get(0), vectorVertex.get(1));
				Edge v2 = mesh.uniqueEdge(vectorVertex.get(1), vectorVertex.get(2));
				Edge v3 = mesh.uniqueEdge(vectorVertex.get(2), vectorVertex.get(0));
				mesh.addFace(v1, v2, v3).setNormals(normal);
				vectorVertex.clear();
				normal = null;
			} else if (numbers[0].equals("vertex")) {
				Vertex vertex = mesh
						.uniqueVertex(new Vertex(toFloat(numbers[1]), toFloat(numbers[2]), toFloat(numbers[3])));
				vectorVertex.add(vertex);
			} else if (numbers[0].equals("facet") && numbers[1].equals("normal")) {
				normal = new float[3];
				normal[0] = toFloat(numbers[2]);
				normal[1] = toFloat(numbers[3]);
				normal[2] = toFloat(numbers[4]);
			}
		}
		in.close();
		return mesh;
	}

	/**
	 * Converts a string to a float number
	 * 
	 * @param string
	 * @return
	 * @throws ParseException
	 */
	protected synchronized static float toFloat(String string) throws ParseException {
		// E+05 -> E05, e+05 -> E05
		string = string.replaceFirst("[eE]\\+", "E");
		// E-05 -> E-05, e-05 -> E-05
		string = string.replaceFirst("e\\-", "E-");
		return decimalFormat.parse(string).floatValue();
	}


}
